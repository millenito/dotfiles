# bspwm hotkeys
#
# Cleanly quit bspwm
super + shift + e
	bspc quit 1

# Restart bspwm
super + shift + r
	bspc wm -r && $SCRIPTS/pindah_monitor_dirumah.sh

# Show keybindings
super + F1
	$TERMINAL -e keybindings.sh
#
# Window manipulation
# ______________

# Close window
super + q
	bspc  node -c

# Kill window
super + shift + q
	bspc  node -k

# Toggle pseudo tiling
super + shift + t
	bspc node -t {pseudo_tiled,tiled}

# Toggle tiling
super + t
	{bspc node -t floating && window-placer $(bspc query -T -d | grep -o '"state":"floating"' | wc -l),bspc node -t tiled}

# Force all windows of the desktop to tile
super + ctrl + t
	bspcp tile

# Force all windows of the desktop to float and arrange them
super + ctrl + shift + t
	bspcp float
	
# Toggle fullscreen
super + f 
	bspc node -t {fullscreen,tiled}	

# Try to keep size and position of the selected window
super + p
	bspc node -g private

# Make window sticky
super + i
	bspc node -g sticky

# Lock a window from closing
super + Escape
	bspc node -g locked 

### Map or unmap windows (functional equivalent of "minimize")
#super + c
#    whid dmenu
#
#super + shift + c
#    whid hide
#
#super + ctrl + c
#    whid last

#
# Window moving and splitting
# ______________    

# Autopresel (split window in its largest dimension)
#ctrl + space
	#auto-presel

# Presel window for splitting in certain direction
alt + ctrl + {h,j,k,l}
	bspc node -p \~{west,south,north,east}

alt + ctrl + {Left,Down,Up,Right}
	bspc node -p \~{west,south,north,east}

# Presel the desktop for splitting in certain direction
# alt + shift + {a,s,w,d}
	# bspc node @/ -p \~{west,south,north,east}
 
alt + shift + {h,j,k,l}
	 bspc node @/ -p \~{west,south,north,east}

# alt + shift + {Left,Down,Up,Right}
	# bspc node @/ -p \~{west,south,north,east}
# Set splitting ratio of windows
alt + ctrl + {1-9}
	bspc node -o 0.{1-9}
		
# Move current window to largest space or preselected area if there is one.
super + m
    windowpromoter

# Create a new "master area", splitting the whole desktop instead of just windows.
super + shift + m
	bspc node -n @/
	
# Go to desktop and press again to go back and forth
super + {1-9,0}
    desktop='^{1-9,10}'; \
    bspc query -D -d "$desktop.focused" && bspc desktop -f last.local || bspc desktop -f "$desktop"

# Move focused window to desktop
super + shift + {1-9,0}
    bspc node -d ^{1-9,10}

super + shift + {n,p}
    bspc node -d {next,prev} -f

# Go to last desktop
super + a
    bspc desktop -f last

## Alternative: i3 style behavior (focus nth, desktop of the focused monitor)
#super + {1-9,0}
#	focusdesktopofthismonitor {1-9}
#super + shift + {1-9,0}
#	movetodesktopofthismonitor {1-9,10}

## Another alternative: xmonad style desktops. You have 10 desktops shared between all monitors,
## and focusing a desktop focuses it on the currently focused monitor
#super + {1-9,0}
#	summondesktop.sh {1-9,10}
#super + shift + {1-9,0}
#	bspc node -d ^{1-9,10}

# Select previous / next desktop in monitor
super + {_,shift + }Tab
	bspc desktop -f {next,prev}.local

#Focus windows by direction, if there's no windows then focus monitor on that direction. Works with multihead
super +  {h,j,k,l}
    $SCRIPTS/bspwm/focusmover {west,south,north,east}
    #bspc node -f {west,south,north,east} || bspc monitor -f {west,south,north,east}

#super +  {Left,Down,Up,Right}
    #focusmover {west,south,north,east}
        	
# Move tiled windows. Moving a tiled window to 
# preselected one moves into preselection instead. 
# Moving out of the screen should move the window to next monitor if possible
super + shift + {h,j,k,l}
	windowgrabber {west,south,north,east}
	
# Different style of movement: transplant into window in chosen direction
super + shift + {Left,Down,Up,Right}
	euclid_mover {west,south,north,east}

#resize windows
super + ctrl + {h,j,k,l}
	bspwm_resize.sh {west,south,north,east}
	
super + ctrl + {Left,Down,Up,Right}
	bspwm_resize.sh {west,south,north,east}

# Move window to monitor
super + shift + ctrl + {h,j,k,l}
    bspc node -m {west,south,north,east} -f
#
# Layout manipulation/desktop level controls
# ______________    

# Toggle monocle mode
super + w
	bspc desktop -l next
	
# Equalize and un-equalize windows
super + {_,shift} + equal
    bspc node @/ {-E,-B}

# Balance brother node. If you do this on biggest window of the desktop, it usually means balancing all windows with except the biggest.
super + alt + b
	bspc node @brother -B

# Toggle automatic balancing of windows
alt + b
	euclid_balancer

# Mirror and flip leaves of tree
super + {comma,period}
	bspc node @/ -F {horizontal,vertical}
	
# Rotate leaves of tree
super + shift + {comma,period}
	bspc node @/ -R {90,270}

# Change window gap

super + g
	bspc config -d focused window_gap {$gap,$(($gap+$gap)),$(($gap+$gap+$gap))}

super + button{4,5}
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` {+,-} 2 ))
#
# mouse bindings
# __________________

~button1
	DidIClickDesktop.sh && gapgrab	

~button2
	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmDesktopMenui
#DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/BspwmWindowMenui
		
~button3
	DidIClickDesktop.sh && mygtkmenui -- .config/GTKmenu/LaunchMenu

# Switch workspace by scrolling on the desktop. Causes scrolling issues on some systems.
#~button4
#	DidIClickDesktop.sh && bspc desktop -f next
#~button5
#	DidIClickDesktop.sh && bspc desktop -f prev
	
### Add or remove desktops by scrolling
super + ctrl + button5
    bspcp dsktp rm

super + ctrl + button4
    bspcp dsktp add

# Spawn applications popup menu and manually tile selected 
# app where your mouse was when you opened the menu. Smartsplit only chooses
# biggest dimension of the window, MouseLaunch only cares which edge is closer.
# mod5 is alt_gr (first key right from space) on most keyboards. 
mod5 + @button1
    MouseLaunch ; mygtkmenui -- .config/GTKmenu/LaunchMenu
#	smartsplit ; dboxmenu

# Spawn window manipulation menu
# Mod1 is alt
#    BspwmWindowMenu
mod1 + @button1
    mygtkmenui -- .config/GTKmenu/BspwmWindowMenui


#
# Touchpad "gestures" (depend on your touchpad driver, very likely to be unavailable)
#_____________________
    
#
# spawn programs
#

# Launch terminal
super + Return
	$TERMINAL

# Launch terminal in same directory as previous terminal
super + shift + Return
    $SCRIPTS/open-terminal-here
	
# Open scratchpad
super + s
    $SCRIPTS/bspwm/scratchpad.sh

# Launch GUI Programs
# GUI: Browser, Thunar, Spotify, Dbeaver, Filezilla, pAvucontrol, Pamac
super + o ; {b,t,s,d,f,a,p}
    {$BROWSER, \
    thunar, \
    spotify, \
    dbeaver, \
    filezilla, \
    pavucontrol, \
    pamac-manager

    }
# Launch CLI/TUI Programs
# CLI/TUI: Ranger, Transmission, Htop, Gotop
super + c ; {r,t,h,g,b}
    {$TERMINAL -e ranger, \
    $TERMINAL -e transmission-remote-cli, \
    $TERMINAL -e htop, \
    $TERMINAL -e gotop, \
    $TERMINAL -e bashtop
    }

# Toggle compositor
super + y
	{pkill compton && notify-send 'transparency off',\
	compton -b && notify-send 'transparency on'}

# Screenshot
Print
	flameshot gui

#
# Rofi
#

alt + Tab
    rofi -show window

# ROFI: findeR, Emoji, mpV Picker, Man viewer, sxhkd Keys, Mount, Umount, Bitwarden-cli, Clipboard
super + d ; {r,e,v,m,k,M,u,b,c}
    {$SCRIPTS/rofi/rofi-finder.sh, \
    $SCRIPTS/rofi/rofi-unicode.sh, \
    $SCRIPTS/rofi/rofi-mpv-picker.sh, \
    $SCRIPTS/rofi/rofi-man-viewer.sh, \
    $SCRIPTS/rofi/rofi-sxhkd-bindings.sh, \
    $SCRIPTS/rofi/rofi-mount.sh, \
    $SCRIPTS/rofi/rofi-umount.sh, \
    bwmenu -C --auto-lock -1, \
    clipmenu
    }

# "Super" to open rofi menu (binds in $SCRIPTS/keyboard_scripts.sh using xcape)
super + shift + ctrl + alt + space
    rofi -show

# Empty clipboard
super + shift + c
    clipdel -d '.*'; notify-send 'Cleared clipboard'

#
# Media keys
#

XF86AudioRaiseVolume
	pulseaudio-ctl up 5

XF86AudioLowerVolume
	pulseaudio-ctl down 5

XF86AudioMute
	pulseaudio-ctl mute
	
XF86MonBrightnessDown
    brightnessctl set 2000-

XF86MonBrightnessUp
    brightnessctl set +2000
 

XF86Sleep
	systemctl suspend

super + {Up,Down}
    pulseaudio-ctl {up,down} 5

super + {Left,Right}
    brightnessctl set {2000-,+2000}

# make sxhkd reload its configuration files:
super + shift + Escape
	pkill -USR1 -x sxhkd && notify-send 'sxhkd reloaded'

#edit this file
alt + ctrl + space
	$GUI_EDITOR ~/.config/sxhkd/sxhkdrc

# Remove receptacles
super + BackSpace
  for i in $(bspc query -N -n .leaf.!window.local); do bspc node $i -k; done
